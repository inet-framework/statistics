version 3
run Exp23-0-20230511-13:58:29-51126
attr configname Exp23
attr datetime 20230511-13:58:29
attr datetimef 20230511-135829
attr experiment Exp23
attr inifile omnetpp.ini
attr iterationvars $iaTime=400ms
attr iterationvarsd iaTime=400ms
attr iterationvarsf iaTime=400ms-
attr measurement $iaTime=400ms
attr network DiffservNetwork
attr processid 51126
attr repetition 0
attr replication #0
attr resultdir results
attr runnumber 0
attr seedset 0
itervar iaTime 400ms
config **.param-recording false
config **.vector-recording false
config image-path /home/levy/workspace/inet/images
config output-scalar-file results/omnetpp.ini-Exp23-#0.sca
config sim-time-limit 10s
config extends "Exp2, Exp2_ingress, Exp2_red, Apps"
config **.ingressTC.marker.dscps "\"AF11 AF12 AF13 AF13 BE\""
config **.edgeDatarate 10Mbps
config **.coreDatarate 500kbps
config **.H4.numApps 1
config **.H4.app[0].typename UdpBasicApp
config **.H4.app[0].destPort 1000
config **.H4.app[0].startTime uniform(1s,2s)
config **.H4.app[0].stopTime 1200s
config **.H4.app[0].sendInterval 400ms
config **.H4.app[0].messageLength 500B-20B-8B
config **.H8.numApps 1
config **.H8.app[0].typename UdpSink
config **.H8.app[0].localPort 1000
config **.H{1..3}.app[*].packetSent.result-recording-modes count
config **.H{5..7}.app[*].packetReceived.result-recording-modes count
config **.app[*].packetSent.scalar-recording true
config **.app[*].packetReceived.scalar-recording true
config **.app[*].rcvdPk*.scalar-recording true
config **.R?.eth[*].ingressTC.typename TC1
config **.ingressTC.numClasses 4
config **.ingressTC.classifier.filters "xmldoc(\"filters.xml\", \"//experiment[@id='default']\")"
config **.R?.ppp[*].queue.typename DSQueue2
config **.R?.**.beQueue.packetCapacity 100
config **.R?.**.red1.minth 60
config **.R?.**.red1.maxth 100
config **.R?.**.red1.maxp 0.40
config **.R?.**.red2.minth 30
config **.R?.**.red2.maxth 70
config **.R?.**.red2.maxp 0.70
config **.R?.**.red3.minth 10
config **.R?.**.red3.maxth 40
config **.R?.**.red3.maxp 1.00
config **.R?.**.wrr.weights "\"1 1\""
config **.R2.ppp[2].queue.afQueue.queueLength.result-recording-modes timeavg,vector
config **.afQueue.*.scalar-recording true
config **.H{1..8}.numApps 2
config **.H{1..4}.app[0].typename UdpBasicBurst
config **.H1.app[*].destAddresses "\"H5\""
config **.H2.app[*].destAddresses "\"H6\""
config **.H3.app[*].destAddresses "\"H7\""
config **.H4.app[*].destAddresses "\"H8\""
config **.H{1..4}.app[0].chooseDestAddrMode "\"once\""
config **.H{1..4}.app[0].destPort 2000
config **.H{1..4}.app[0].startTime uniform(1s,2s)
config **.H{1..4}.app[0].stopTime 1200s
config **.H{1..4}.app[0].messageLength 172B
config **.H{1..4}.app[0].burstDuration exponential(0.352s)
config **.H{1..4}.app[0].sleepDuration exponential(0.650s)
config **.H{1..4}.app[0].sendInterval 20ms
config **.H{5..8}.app[0].typename UdpBasicBurst
config **.H{5..8}.app[0].localPort 2000
config **.H{5..8}.app[0].delayLimit 0ms
config **.H{5..8}.app[0].destAddresses "\"\""
config **.H{5..8}.app[0].chooseDestAddrMode "\"once\""
config **.H{5..8}.app[0].destPort 0
config **.H{5..8}.app[0].messageLength 0B
config **.H{5..8}.app[0].burstDuration 0s
config **.H{5..8}.app[0].sleepDuration 0s
config **.H{5..8}.app[0].sendInterval 0ms
config **.H{1..4}.app[1].typename UdpBasicApp
config **.H{1..4}.app[1].destPort 1000
config **.H{1..4}.app[1].startTime uniform(1s,2s)
config **.H{1..4}.app[1].stopTime 1200s
config **.H{1..4}.app[1].sendInterval 40ms
config **.H{1..4}.app[1].messageLength 500B
config **.H{5..8}.app[1].typename UdpSink
config **.H{5..8}.app[1].localPort 1000
config network DiffservNetwork
config sim-time-limit 10s
config **.result-recording-modes ""
config **.scalar-recording false
config **.eth[*].queue.typename EthernetQosQueue
config **.queue.dataQueue.typename DropTailQueue
config **.queue.packetCapacity 100
config **.queue.dataQueue.packetCapacity 100

scalar DiffservNetwork.R2.ppp[2].queue.afQueue queueLength:timeavg 0.9199327396207
attr autoWarmupFilter false
attr interpolationmode sample-hold
attr recordingmode timeavg
attr source "warmup(atomic(constant0(packetPushEnded) + count(packetPushStarted) - count(packetPulled) - count(packetRemoved) - count(packetDropped)))"
attr title "queue length, timeavg"
attr unit pk

